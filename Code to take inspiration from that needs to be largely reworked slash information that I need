def Check_Data(frame):
    #HEADER and STREAM
    has_header = frame.Has("I3EventHeader") #all event should have a header
    has_stream = frame["I3EventHeader"].sub_event_stream != "NullSplit"
    if not has_stream:
        return False #Dont use NullSplit frames

    has_rawdata =  False #data wich stores raw waveform info
    if frame.Has("InIceRawData"):
        try:
            raw_data = 0
            raw_data = frame["InIceRawData"]
            if len(raw_data) != 0:
                has_rawdata = True
            else: 
                has_rawdata = False
        except:
            has_rawdata = False



     event = np.zeros(1,dtype = info_dtype)    
    #Log all the event info
    if data_type == 'muongun':
        w = frame['MuonWeight'].value
        event[["id","image","qtot","qst","primary","prim_daughter","logan_veto","hese","weight_val"]]=\
           (id[0], im, qtot, st_info, primary[0], prim_daughter[0], veto[0],hese[0], w)
    else:
        event[["id","image","qtot","qst","primary","prim_daughter","trck_reco","cscd_reco","logan_veto","hese","weight_dict"]]=\
           (id[0], im, qtot, st_info, primary[0], prim_daughter[0],trck_reco[0],cscd_reco[0],veto[0],hese[0], weight[0])
    data.append(event)
#variables to find here: im, qtot, id[0], st_info, primary[0], prim_daughter[0], veto[0], hese[0], trck_reco[0], cscd_reco[0], weight[0]


#should there be an argument parser in this version? probably, right?
parser = argparse.ArgumentParser()
parser.add_argument("-i","--infile",
                    dest="infile",
                    type=str,
                    nargs = "+",
                    help="[I]nfile name")

parser.add_argument("-o","--outfile",
                    dest="outfile",
                    type=str,
                    default="Out",
                    help="base name for outfile")

parser.add_argument("-gcd","--gcdfile",
                    dest="gcdfile",
                    type=str,
                    help="gcdfile location")

parser.add_argument("-t","--data_type",
                    dest="data_type",
                    type=str,
                    choices=['genie','corsika','muongun','data'],
                    help="corsika, genie, muongun, data")

parser.add_argument("-y","--year",
                    dest="year",
                    type=int,
                    default=2012,
                    choices=[2011,2012,2016],
                    help="production year, only matters for corsika")

parser.add_argument("-set","--dataset",
                    dest="dataset",
                    type=int,
                    default=-1,
                    help="corsika dataset number")

parser.add_argument('-it', '--interaction_type',
                    dest='it',
                    type=int,
                    default=1,
                    help='Interaction types are : CC -1, NC -2 ,GR-3')

args = parser.parse_args()
infiles=args.infile
outfile=args.outfile
gfile=args.gcdfile
it=args.it
dataset=args.dataset
data_type=args.data_type
year= args.year


GEO = 'ic86'
C=0.299792458                                                                  
N=1.3195
V=C/N
QST0_THRES = 2000 # PE, cut on max string charge
QST1_THRES = 10 # PE, cut on max string charge
QST2_THRES = 10 # PE, cut on max string charge
QTOT_THRES = 1000 #PE, cut on total charge
LLH_THRES = -0.1 #LLh diffrence between spe and cascade reco
DIST_ST_CUT = 150**2 #m, look at string within this distance of the max string

#image size
N_Y_BINS = 60
N_X_BINS = 500
N_CHANNELS = 3 #number of strings to make image from

#for image bug fix, where early niose hits can shift the image frame away
#from the event sometimes <1% cases
#How many simultaneous noise hits can happen too early in the event?
#hardly more than 3
N_NOISE_HITS = 3 
#How big of a shift we need to worry about?
#can't be too small or you would be shifting normal waveforms
#out of the image for no reason
MAX_TIME_SHIFT = 700 #ns or ~half an image 

DEFAULT_INDEX = 2.88
DEFAULT_PHI = 2.1467


file_list = []
geofile = dataio.I3File(gfile)
i_frame = geofile.pop_frame()
g_frame = geofile.pop_frame()
geofull = g_frame["I3Geometry"]
geometry = g_frame["I3Geometry"].omge



#not sure if this needs to be reworked or not
st_info_dtype = np.dtype(
    [                                                                                       
        ('q', np.float32),
        ('num', np.uint32),
        ('dist', np.float32)
    ]
)

id_dtype = np.dtype(
    [
        ("run_id", np.uint32),
        ("sub_run_id", np.uint32),
        ("event_id", np.uint32),
        ("sub_event_id", np.uint32),
    ]
)

particle_dtype = np.dtype(
    [
        ("tree_id", np.uint32,(2)),
        ("pdg", np.int32),
        ("energy", np.float32),
        ("position", np.float32,(3)),
        ("direction", np.float32,(2)),
        ("time", np.float32),
        ("length", np.float32)
    ]
)

veto_dtype = np.dtype(                                             
    [                                                                             
        ("SPE_rlogl", np.float32),                                                      
        ("Cascade_rlogl", np.float32),
        ("SPE_rlogl_noDC", np.float32),                                                   
        ("Cascade_rlogl_noDC", np.float32),                                              
        ("FirstHitZ", np.float32),
        ("VHESelfVetoVertexPosZ", np.float32),                                             
        ("LeastDistanceToPolygon_Veto", np.float32)
       
    ]
)

hese_dtype = np.dtype(                                             
    [                                                                             
        ("vheselfveto", np.bool_),
        ("vheselfvetovertexpos", np.float32,(3)),
        ("vheselfvetovertextime", np.float32),
    ]
)
