def Check_Data(frame):
    #HEADER and STREAM
    has_header = frame.Has("I3EventHeader") #all event should have a header
    has_stream = frame["I3EventHeader"].sub_event_stream != "NullSplit"
    if not has_stream:
        return False #Dont use NullSplit frames

    has_rawdata =  False #data wich stores raw waveform info
    if frame.Has("InIceRawData"):
        try:
            raw_data = 0
            raw_data = frame["InIceRawData"]
            if len(raw_data) != 0:
                has_rawdata = True
            else: 
                has_rawdata = False
        except:
            has_rawdata = False



     event = np.zeros(1,dtype = info_dtype)    
    #Log all the event info
    if data_type == 'muongun':
        w = frame['MuonWeight'].value
        event[["id","image","qtot","qst","primary","prim_daughter","logan_veto","hese","weight_val"]]=\
           (id[0], im, qtot, st_info, primary[0], prim_daughter[0], veto[0],hese[0], w)
    else:
        event[["id","image","qtot","qst","primary","prim_daughter","trck_reco","cscd_reco","logan_veto","hese","weight_dict"]]=\
           (id[0], im, qtot, st_info, primary[0], prim_daughter[0],trck_reco[0],cscd_reco[0],veto[0],hese[0], weight[0])
    data.append(event)
#variables to find here: im, qtot, id[0], st_info, primary[0], prim_daughter[0], veto[0], hese[0], trck_reco[0], cscd_reco[0], weight[0]




    if frame.Has('SPEFit32_DPFitParams') and frame.Has('CascadeLlhVertexFit_DPParams'):
        veto_cas_rlogl = frame['CascadeLlhVertexFit_DPParams'].ReducedLlh
        veto_spe_rlogl = frame['SPEFit32_DPFitParams'].rlogl
        trck = frame['CascadeLlhVertexFit_DP']
        cscd = frame['SPEFit32_DP']

    if frame.Has('SPEFit32_noDC_DPFitParams') and frame.Has('CascadeLlhVertexFit_noDC_DPParams'):
        veto_cas_rlogl_ndc = frame['CascadeLlhVertexFit_noDC_DPParams'].ReducedLlh
        veto_spe_rlogl_ndc = frame['SPEFit32_noDC_DPFitParams'].rlogl
       
    if frame.Has('HESE3_VHESelfVetoVertexPos'):
        veto_svv_z = frame['HESE3_VHESelfVetoVertexPos'].z
       
    if frame.Has("LeastDistanceToPolygon_Veto"):
        veto_ldp = frame["LeastDistanceToPolygon_Veto"].value

    if frame.Has('depthFirstHit'):     
        veto_fh_z = frame['depthFirstHit'].value
    
