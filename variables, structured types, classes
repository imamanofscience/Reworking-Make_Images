#classes (I, Leah, made these)

#muongun class
class muongun_attributes:
    def __init__(self):
       WEIGHT_KEY = 'None'
       PULSES_KEY = 'SplitInIcePulses'
       MCTREE_KEY = 'I3MCTree_preMuonProp'
       weight_dtype = np.dtype(
           [
               ('ThisisData',np.float32),
           ]
       )  

#genie class
class genie_attributes:
    def __init__(self):
        WEIGHT_KEY = "I3MCWeightDict"
        PULSES_KEY = 'SplitInIcePulses'
        MCTREE_KEY = 'I3MCTree'
        weight_dtype = np.dtype(
            [
                ('PrimaryNeutrinoAzimuth',np.float32), 
                ('TotalColumnDepthCGS',np.float32), 
                ('MaxAzimuth',np.float32), 
                ('SelectionWeight',np.float32), 
                ('InIceNeutrinoEnergy',np.float32), 
                ('PowerLawIndex',np.float32), 
                ('TotalPrimaryWeight',np.float32), 
                ('PrimaryNeutrinoZenith',np.float32), 
                ('TotalWeight',np.float32), 
                ('PropagationWeight',np.float32), 
                ('NInIceNus',np.float32), 
                ('TrueActiveLengthBefore',np.float32), 
                ('TypeWeight',np.float32), 
                ('PrimaryNeutrinoType',np.int64), 
                ('RangeInMeter',np.float32), 
                ('BjorkenY',np.float32), 
                ('MinZenith',np.float32), 
                ('InIceNeutrinoType',np.float32), 
                ('CylinderRadius',np.float32), 
                ('BjorkenX',np.float32), 
                ('InteractionPositionWeight',np.float32), 
                ('RangeInMWE',np.float32), 
                ('InteractionColumnDepthCGS',np.float32), 
                ('CylinderHeight',np.float32), 
                ('MinAzimuth',np.float32), 
                ('TotalXsectionCGS',np.float32), 
                ('OneWeightPerType',np.float32), 
                ('ImpactParam',np.float32), 
                ('InteractionType',np.float32), 
                ('TrueActiveLengthAfter',np.float32), 
                ('MaxZenith',np.float32), 
                ('InteractionXsectionCGS',np.float32), 
                ('PrimaryNeutrinoEnergy',np.float32), 
                ('DirectionWeight',np.float32), 
                ('InjectionAreaCGS',np.float32), 
                ('MinEnergyLog',np.float32), 
                ('SolidAngle',np.float32), 
                ('LengthInVolume',np.float32), 
                ('NEvents',np.uint32), 
                ('OneWeight',np.float32), 
                ('MaxEnergyLog',np.float32), 
                ('InteractionWeight',np.float32), 
                ('EnergyLost',np.float32)
            ]
        )



#corsika class
class corsika_attributes:
   def __init__(self, year, dataset):
      WEIGHT_KEY = "CorsikaWeightMap"
      MCTREE_KEY = 'I3MCTree'
      if year == 2012:
        PULSES_KEY = 'SplitInIcePulses'
        if dataset == 12379:
            weight_dtype = np.dtype(
            [
                ('AreaSum',np.float32),
                ('Atmosphere',np.float32),
                ('BackgroundI3MCPESeriesMapCount',np.float32),
                ('CylinderLength',np.float32),
                ('CylinderRadius',np.float32),
                ('EnergyPrimaryMax',np.float32),
                ('EnergyPrimaryMin',np.float32),
                ('FluxSum',np.float32),
                ('I3MCPESeriesMapCount',np.float32),
                ('Multiplicity',np.float32),
                ('NEvents',np.float32),
                ('OverSampling',np.float32),
                ('ParticleType',np.float32),
                ('Polygonato',np.float32),
                ('PrimaryEnergy',np.float32),
                ('PrimarySpectralIndex',np.float32),
                ('PrimaryType',np.int64),
                ('ThetaMax',np.float32),
                ('ThetaMin',np.float32),
                ('TimeScale',np.float32),
                ('Weight',np.float32),
            ]
            )
        else:
            weight_dtype = np.dtype(
            [
                ("AreaSum" ,np.float32),
                ("Atmosphere",np.float32),
                ("CylinderLength",np.float32),
                ("CylinderRadius" ,np.float32),
                ("DiplopiaWeight",np.float32),
                ("EnergyPrimaryMax",np.float32),
                ("EnergyPrimaryMin",np.float32),
                ("FluxSum",np.float32),
                ("Multiplicity",np.float32),
                ("NEvents",np.float32),
                ("OldWeight",np.float32),
                ("OverSampling",np.float32),
                ("Polygonato",np.float32),
                ("PrimaryEnergy",np.float32),
                ("PrimarySpectralIndex",np.float32),
                ("PrimaryType",np.int64),
                ("ThetaMax",np.float32),
                ("ThetaMin" ,np.float32),
                ("TimeScale",np.float32),
                ("Weight",np.float32)
            ]                            
            )    

    elif year == 2011:
        PULSES_KEY = 'OfflinePulses'
        if dataset == 10668:
            weight_dtype = np.dtype(
            [
                ('AreaSum',np.float32),
                ('Atmosphere',np.float32),
                ('CylinderLength',np.float32),
                ('CylinderRadius',np.float32),
                ('DiplopiaWeight',np.float32),
                ('EnergyPrimaryMax',np.float32),
                ('EnergyPrimaryMin',np.float32),
                ('FluxSum',np.float32),
                ('Multiplicity',np.float32),
                ('NEvents',np.float32),
                ('OldWeight',np.float32),
                ('Polygonato',np.float32),
                ('PrimaryEnergy',np.float32),
                ('PrimarySpectralIndex',np.float32),
                ('PrimaryType',np.int64),
                ('ThetaMax',np.float32),
                ('ThetaMin',np.float32),
                ('TimeScale',np.float32),
                ('Weight',np.float32)
            ]
            )       
        else:
            weight_dtype = np.dtype(
            [
                ('AreaSum',np.float32),
                ('Atmosphere',np.float32),
                ('CylinderLength',np.float32),
                ('CylinderRadius',np.float32),
                ('DiplopiaWeight',np.float32),
                ('EnergyPrimaryMax',np.float32),
                ('EnergyPrimaryMin',np.float32),
                ('FluxSum',np.float32),
                ('Multiplicity',np.float32),
                ('NEvents',np.float32),
                ('ParticleType',np.int64),
                ('Polygonato',np.float32),
                ('PrimarySpectralIndex',np.float32),
                ('TimeScale',np.float32),
                ('Weight',np.float32)
            ]
            )

    elif year == 2016:
        PULSES_KEY = 'SplitInIcePulses'
        MCTREE_KEY = 'I3MCTree_preMuonProp'
        weight_dtype = np.dtype(
            [
                ('AreaSum',np.float32),
                ('Atmosphere',np.float32),
                ('CylinderLength',np.float32),
                ('CylinderRadius',np.float32),
                ('EnergyPrimaryMax',np.float32),
                ('EnergyPrimaryMin',np.float32),
                ('FluxSum',np.float32),
                ('Multiplicity',np.float32),
                ('NEvents',np.float32),
                ('OverSampling',np.float32),
                ('ParticleType',np.int64),
                ('Polygonato',np.float32),
                ('PrimaryEnergy',np.float32),
                ('PrimarySpectralIndex',np.float32),
                ('PrimaryType',np.float32),
                ('ThetaMax',np.float32),
                ('ThetaMin',np.float32),
                ('TimeScale',np.float32),
                ('Weight',np.float32)
            ]
        )       




GEO = 'ic86'
C=0.299792458                                                                  
N=1.3195
V=C/N
QST0_THRES = 2000 # PE, cut on max string charge
QST1_THRES = 10 # PE, cut on max string charge
QST2_THRES = 10 # PE, cut on max string charge
QTOT_THRES = 1000 #PE, cut on total charge
LLH_THRES = -0.1 #LLh diffrence between spe and cascade reco
DIST_ST_CUT = 150**2 #m, look at string within this distance of the max string

#image size
N_Y_BINS = 60
N_X_BINS = 500
N_CHANNELS = 3 #number of strings to make image from

#for image bug fix, where early niose hits can shift the image frame away
#from the event sometimes <1% cases
#How many simultaneous noise hits can happen too early in the event?
#hardly more than 3
N_NOISE_HITS = 3 
#How big of a shift we need to worry about?
#can't be too small or you would be shifting normal waveforms
#out of the image for no reason
MAX_TIME_SHIFT = 700 #ns or ~half an image 

DEFAULT_INDEX = 2.88
DEFAULT_PHI = 2.1467

 
    veto_cas_rlogl = 999
    veto_spe_rlogl = -999
    veto_cas_rlogl_ndc = 999
    veto_spe_rlogl_ndc = -999
    veto_fh_z = -999
    veto_svv_z = -999
    veto_ldp = -999


#not sure if this needs to be reworked or not
st_info_dtype = np.dtype(
    [                                                                                       
        ('q', np.float32),
        ('num', np.uint32),
        ('dist', np.float32)
    ]
)

id_dtype = np.dtype(
    [
        ("run_id", np.uint32),
        ("sub_run_id", np.uint32),
        ("event_id", np.uint32),
        ("sub_event_id", np.uint32),
    ]
)

particle_dtype = np.dtype(
    [
        ("tree_id", np.uint32,(2)),
        ("pdg", np.int32),
        ("energy", np.float32),
        ("position", np.float32,(3)),
        ("direction", np.float32,(2)),
        ("time", np.float32),
        ("length", np.float32)
    ]
)

veto_dtype = np.dtype(                                             
    [                                                                             
        ("SPE_rlogl", np.float32),                                                      
        ("Cascade_rlogl", np.float32),
        ("SPE_rlogl_noDC", np.float32),                                                   
        ("Cascade_rlogl_noDC", np.float32),                                              
        ("FirstHitZ", np.float32),
        ("VHESelfVetoVertexPosZ", np.float32),                                             
        ("LeastDistanceToPolygon_Veto", np.float32)
       
    ]
)

hese_dtype = np.dtype(                                             
    [                                                                             
        ("vheselfveto", np.bool_),
        ("vheselfvetovertexpos", np.float32,(3)),
        ("vheselfvetovertextime", np.float32),
    ]
)
