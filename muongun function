
   w = frame['MuonWeight'].value
        event[["id","image","qtot","qst","primary","prim_daughter","logan_veto","hese","weight_val"]]=\
           (id[0], im, qtot, st_info, primary[0], prim_daughter[0], veto[0],hese[0], w)

        w = frame['MuonWeight'].value
        event[["id","image","qtot","qst","primary","prim_daughter","logan_veto","hese","weight_val"]]=\
           (id[0], im, qtot, st_info, primary[0], prim_daughter[0], veto[0],hese[0], w)
    else:
        event[["id","image","qtot","qst","primary","prim_daughter","trck_reco","cscd_reco","logan_veto","hese","weight_dict"]]=\
           (id[0], im, qtot, st_info, primary[0], prim_daughter[0],trck_reco[0],cscd_reco[0],veto[0],hese[0], weight[0])
#    print(event['qtot'],event['qst'],event['logan_veto'])
#    print(event['trck_reco'])



    info_dtype = np.dtype(
        [
            ("id", id_dtype),
            ("image", np.float32, (N_X_BINS, N_Y_BINS, N_CHANNELS)),
            ("qtot", np.float32),
            ("qst", st_info_dtype, N_CHANNELS),
            ("primary", particle_dtype),
            ("prim_daughter", particle_dtype),
            ("logan_veto", veto_dtype),                                                  
            ("hese", hese_dtype),
            ("weight_val", np.float32),        
        ]
    )

    muongun_nfiles={21317:9996,21316:9999,21315:15000}
    generator_set1_infile=glob.glob("/data/sim/IceCube/2016/generated/MuonGun/21315/0000000-0000999/*.i3.zst")
    generator_set1=harvest_generators([generator_set1_infile[0]]); infiles_set1 = muongun_nfiles[21315]
    generator_set2_infile=glob.glob("/data/sim/IceCube/2016/generated/MuonGun/21316/0000000-0000999/*.i3.zst")
    generator_set2=harvest_generators([generator_set2_infile[0]]); infiles_set2 = muongun_nfiles[21316]
    generator_set3_infile=glob.glob("/data/sim/IceCube/2016/generated/MuonGun/21317/0000000-0000999/*.i3.zst")
    generator_set3=harvest_generators([generator_set3_infile[0]]); infiles_set3 = muongun_nfiles[21317]
    mg_generator=((infiles_set1*generator_set1) +
               (infiles_set2*generator_set2) +
               (infiles_set3*generator_set3))
    mg_model = MuonGun.load_model('GaisserH4a_atmod12_SIBYLL')



    passed = has_header and has_weights and has_rawdata and has_mctree and has_pulses 
    if passed:
#        print("PASSES")
        if data_type == 'genie': #Keep only events with right interaction type
            if frame[WEIGHT_KEY]['InteractionType'] != it:
                return False


elif data_type == 'muongun':
    WEIGHT_KEY = 'None'
    PULSES_KEY = 'SplitInIcePulses'
    MCTREE_KEY = 'I3MCTree_preMuonProp'
    weight_dtype = np.dtype(
        [
            ('ThisisData',np.float32),
        ]
    )  
