class Make_Image(frame):
#organizing stuff in make images:

geometry st_info data should be self.objects (init) in cuts and then import cuts
self.st_info = cuts.cuts(populate_st_info)
??? or not ??? maybe another way???
return st_info etc in a function and then make it equal to a var and put that into make images !

  def reformatting_information(self): #reformatting information
    #Log logan's veto parameters
    global geometry
    veto = np.zeros(1,dtype = veto_dtype)
    trck_reco = np.zeros(1,dtype = particle_dtype)
    cscd_reco = np.zeros(1,dtype = particle_dtype)
    trck= dataclasses.I3Particle()
    cscs= dataclasses.I3Particle()
 
    veto_cas_rlogl = 999
    veto_spe_rlogl = -999
    veto_cas_rlogl_ndc = 999
    veto_spe_rlogl_ndc = -999
    veto_fh_z = -999
    veto_svv_z = -999
    veto_ldp = -999
    
    trck_reco[["tree_id","pdg","energy","position","direction","time","length"]] =\
    ([trck.id.majorID, trck.id.minorID], trck.pdg_encoding, trck.energy,[trck.pos.x,trck.pos.y,trck.pos.z],\
     [trck.dir.zenith,trck.dir.azimuth], trck.time, trck.length)
    cscd_reco[["tree_id","pdg","energy","position","direction","time","length"]] =\
    ([cscd.id.majorID, cscd.id.minorID], cscd.pdg_encoding, cscd.energy,[cscd.pos.x,cscd.pos.y,cscd.pos.z],\
     [cscd.dir.zenith, cscd.dir.azimuth],cscd.time, cscd.length)

    pulses= dataclasses.I3RecoPulseSeriesMap.from_frame(frame, PULSES_KEY)

    for img_ch, (q, stnum, dist) in enumerate(st_info):
        for omkey in wf_map.keys():
            if (omkey.string == stnum):
                for wf in wf_map.get(omkey, []):
                    if wf.status == 0: #and wf.source_index == 0:
                        wfms.append({
                                'wfm': wf.waveform,
                                'time': wf.time,  
                                'width': wf.bin_width,
                                'dom_idx': omkey.om - 1,
                                'img_ch': img_ch,
                                'om_pos': [geometry[omkey].position.x,geometry[omkey].position.y,geometry[omkey].position.z]
                                })

    wf_times_arr = np.zeros(shape=(N_Y_BINS, N_CHANNELS))
    wf_pos_arr = np.zeros(shape=(3,N_Y_BINS, N_CHANNELS))
    
    if data_type == 'data':
        save = []
        calib = frame['I3Calibration']
        status = frame['I3DetectorStatus']
        width = 3.33334
        for om, ps in pulses.items():

            if not om.string in st_info['num']:
                continue

            if om in wf_map:
                has_good_wf = False
                for wf in wf_map.get(om, []):
                    if wf.status == 0:
                        has_good_wf = True
                if has_good_wf:
                    continue

         p_time = np.min([i.time for i in ps])
            min_time = p_time - width*15
            max_time = p_time + width*112
            times = np.linspace(min_time, max_time, 128)

            cal = calib.dom_cal[om]
            stat = status.dom_status[om]
            wf_vals=wavereform.refold_pulses(ps, I3Waveform.ATWD, 0, cal, stat, times, False)

            wfms.append({
                    'wfm': wf_vals,
                    'time': min_time,  
                    'width': width,
                    'dom_idx': om.om - 1,
                    'img_ch': chl[0][0],
                    'om_pos': [geometry[om].position.x,geometry[om].position.y,geometry[om].position.z]
                    })

    if len(wfms) < 2:
        print("FAILED only %d WF" %len(wfms) )
        return False


    #we neeed to prevent early noise hits from shifting the actual
    #interaction from the image time frame
    #first work out when the first waveforn starts
    wf_times = np.array([wf['time'] for wf in wfms])
    wf_times = wf_times[wf_times.argsort()]
  
    #find the biggest differnece between starting times
    diff_times = np.diff(wf_times[:N_NOISE_HITS])
    max_diff_pos = np.argmax(diff_times)

    #check if the images needs to be shifted and work out the shift
    if diff_times[max_diff_pos] > MAX_TIME_SHIFT:
        min_time = wf_times[max_diff_pos+1]
    else:
        min_time = wf_times[0]

  def find_primary_particle(self): #finding primary particle

    if not data_type == 'data':
        #find primary particle
        mctree = frame[MCTREE_KEY]
        daughter = None
        if data_type == 'genie':
            prim = dataclasses.get_most_energetic_neutrino(mctree)
            
            max_energy = 0
            for part in mctree.children(prim.id):
                if (part.energy > max_energy) and (abs(part.pdg_encoding) in [11,12,13,14,15,16,17,18]):
                    max_enegy = part.energy
                    daughter = part
        else:
            prim = dataclasses.get_most_energetic_primary(mctree)
            daughter = dataclasses.get_most_energetic_muon(mctree)

    #if no children, then daughter is a duplicate of primary
        if  daughter is None:
            print("MCTree has no primary children")
            primary[["tree_id","pdg","energy","position","direction","time","length"]] =\
            ([prim.id.majorID, prim.id.minorID], prim.pdg_encoding, prim.energy,\
             [prim.pos.x,prim.pos.y,prim.pos.z],\
             [prim.dir.zenith,prim.dir.azimuth],prim.time, prim.length)

            prim_daughter[["tree_id","pdg","energy","position","direction","time","length"]] =\
            ([prim.id.majorID, prim.id.minorID], prim.pdg_encoding, prim.energy,\
             [prim.pos.x,prim.pos.y,prim.pos.z],\
             [prim.dir.zenith,prim.dir.azimuth], prim.time, prim.length)

         #if there are children, daughter is the child with highest energy
        else:
            primary[["tree_id","pdg","energy","position","direction","time","length"]] =\
            ([prim.id.majorID, prim.id.minorID], prim.pdg_encoding, prim.energy,\
             [prim.pos.x,prim.pos.y,prim.pos.z],\
             [prim.dir.zenith,prim.dir.azimuth],prim.time, prim.length)
        
            prim_daughter[["tree_id","pdg","energy","position","direction","time","length"]] =\
            ([daughter.id.majorID, daughter.id.minorID], daughter.pdg_encoding,daughter.energy,\
             [daughter.pos.x,daughter.pos.y,daughter.pos.z],\
             [daughter.dir.zenith,daughter.dir.azimuth],daughter.time,daughter.length)
    

  def create_image(self): #making the image/event
    global data 
    global st_info


    #Log Weight info
    weight = np.zeros(1,dtype = weight_dtype)
    if data_type in ['genie', 'corsika']:
        w = dict(frame[WEIGHT_KEY])
        for key, val in w.items():
            if key in weight_dtype.names:
                weight[key] = val
#        3 lines above replace the 1 line below.  Idea is to only copy fields expected in weight_dtype.
#        The main quantities we care about are (I think):
#           OneWeight, PrimaryNeutrinoEnergy, InteractionType, PrimaryNeutrinoZenith, PrimaryNeutrinoType
#        weight[list(w.keys())] = tuple(w.values())

      #Log id info 
      id = np.zeros(1,dtype = id_dtype)
      H = frame["I3EventHeader"]
      id[["run_id","sub_run_id","event_id","sub_event_id"]] = (H.run_id,H.sub_run_id,H.event_id,H.sub_event_id)

      #Log MCTree info 
      primary = np.zeros(1,dtype = particle_dtype)
      prim_daughter = np.zeros(1,dtype = particle_dtype)

    #Log HESE veto perameters 
    hese = np.zeros(1,dtype = hese_dtype)
    hese_vheselfveto = True
    hese_pos =[-9999,-9999,-9999]
    hese_time = -999
    if frame.Has("HESE3_VHESelfVeto"):
        hese_vheselfveto = frame["HESE3_VHESelfVeto"].value
        hese_pos = [frame["HESE3_VHESelfVetoVertexPos"].x,frame["HESE3_VHESelfVetoVertexPos"].y,frame["HESE3_VHESelfVetoVertexPos"].z]
        hese_time = frame["HESE3_VHESelfVetoVertexTime"].value
    hese[["vheselfveto","vheselfvetovertexpos","vheselfvetovertextime"]][0] =\
    (hese_vheselfveto,hese_pos,hese_time) 

veto[["SPE_rlogl","Cascade_rlogl","SPE_rlogl_noDC", "Cascade_rlogl_noDC","FirstHitZ","VHESelfVetoVertexPosZ","LeastDistanceToPolygon_Veto"]] =\
    (veto_spe_rlogl,veto_cas_rlogl,veto_spe_rlogl_ndc,veto_cas_rlogl_ndc,veto_fh_z,veto_svv_z,veto_ldp)   

    wf_map = frame["CalibratedWaveformsHLCATWD"]   

    wfms = []

    im = np.zeros(shape=(N_X_BINS, N_Y_BINS, N_CHANNELS))

    chl = np.where(st_info['num'] == om.string)

  #make images
    for wfm in wfms:
        wf_shift = 0
        start_ind = min(N_X_BINS, int((wfm['time'] - min_time) / wfm['width']))
        if start_ind >= 0:
            end_ind = min(N_X_BINS, start_ind + len(wfm['wfm']))
            wfm_vals = wfm['wfm'][0:end_ind-start_ind]
        else: 
            wf_shift = abs(start_ind)
            start_ind = 0
            end_ind = min(N_X_BINS, len(wfm['wfm'])-wf_shift)
            if end_ind <0:
                end_ind = 0
            wfm_vals = wfm['wfm'][wf_shift:len(wfm['wfm'])]
        im[start_ind:end_ind, wfm['dom_idx'], wfm['img_ch']] = wfm_vals
        wf_times_arr[wfm['dom_idx'], wfm['img_ch']] = wfm['time']
        wf_pos_arr[0:3,wfm['dom_idx'], wfm['img_ch']] = wfm['om_pos']

    im = np.true_divide(im, 10**(-8))
    im = im.astype(np.float32)

    if np.sum(im[:,:,0])==0:
        print("FAILED no image 0")
        return False
    if np.sum(im[:,:,1])==0:
        print("FAILED no image 1")
        return False
    if np.sum(im[:,:,2])==0:
        print("FAILED no image 2")
        return False

    event = np.zeros(1,dtype = info_dtype)    

       #Log all the event info
    if data_type == 'muongun':
        w = frame['MuonWeight'].value
        event[["id","image","qtot","qst","primary","prim_daughter","logan_veto","hese","weight_val"]]=\
           (id[0], im, qtot, st_info, primary[0], prim_daughter[0], veto[0],hese[0], w)
    else:
        event[["id","image","qtot","qst","primary","prim_daughter","trck_reco","cscd_reco","logan_veto","hese","weight_dict"]]=\
           (id[0], im, qtot, st_info, primary[0], prim_daughter[0],trck_reco[0],cscd_reco[0],veto[0],hese[0], weight[0])
    data.append(event)

def Make_Image(frame):
    
