#corsika function
class Genie_attributes:
   def __init__(self):
   WEIGHT_KEY = "CorsikaWeightMap"
   MCTREE_KEY = 'I3MCTree'

#incorporate this somehow
    if year == 2012:
        PULSES_KEY = 'SplitInIcePulses'




        if dataset == 12379:
            weight_dtype = np.dtype(
            [
                ('AreaSum',np.float32),
                ('Atmosphere',np.float32),
                ('BackgroundI3MCPESeriesMapCount',np.float32),
                ('CylinderLength',np.float32),
                ('CylinderRadius',np.float32),
                ('EnergyPrimaryMax',np.float32),
                ('EnergyPrimaryMin',np.float32),
                ('FluxSum',np.float32),
                ('I3MCPESeriesMapCount',np.float32),
                ('Multiplicity',np.float32),
                ('NEvents',np.float32),
                ('OverSampling',np.float32),
                ('ParticleType',np.float32),
                ('Polygonato',np.float32),
                ('PrimaryEnergy',np.float32),
                ('PrimarySpectralIndex',np.float32),
                ('PrimaryType',np.int64),
                ('ThetaMax',np.float32),
                ('ThetaMin',np.float32),
                ('TimeScale',np.float32),
                ('Weight',np.float32),
            ]
            )
        else:
            weight_dtype = np.dtype(
            [
                ("AreaSum" ,np.float32),
                ("Atmosphere",np.float32),
                ("CylinderLength",np.float32),
                ("CylinderRadius" ,np.float32),
                ("DiplopiaWeight",np.float32),
                ("EnergyPrimaryMax",np.float32),
                ("EnergyPrimaryMin",np.float32),
                ("FluxSum",np.float32),
                ("Multiplicity",np.float32),
                ("NEvents",np.float32),
                ("OldWeight",np.float32),
                ("OverSampling",np.float32),
                ("Polygonato",np.float32),
                ("PrimaryEnergy",np.float32),
                ("PrimarySpectralIndex",np.float32),
                ("PrimaryType",np.int64),
                ("ThetaMax",np.float32),
                ("ThetaMin" ,np.float32),
                ("TimeScale",np.float32),
                ("Weight",np.float32)
            ]                            
            )    

    elif year == 2011:
        PULSES_KEY = 'OfflinePulses'
        if dataset == 10668:
            weight_dtype = np.dtype(
            [
                ('AreaSum',np.float32),
                ('Atmosphere',np.float32),
                ('CylinderLength',np.float32),
                ('CylinderRadius',np.float32),
                ('DiplopiaWeight',np.float32),
                ('EnergyPrimaryMax',np.float32),
                ('EnergyPrimaryMin',np.float32),
                ('FluxSum',np.float32),
                ('Multiplicity',np.float32),
                ('NEvents',np.float32),
                ('OldWeight',np.float32),
                ('Polygonato',np.float32),
                ('PrimaryEnergy',np.float32),
                ('PrimarySpectralIndex',np.float32),
                ('PrimaryType',np.int64),
                ('ThetaMax',np.float32),
                ('ThetaMin',np.float32),
                ('TimeScale',np.float32),
                ('Weight',np.float32)
            ]
            )       
        else:
            weight_dtype = np.dtype(
            [
                ('AreaSum',np.float32),
                ('Atmosphere',np.float32),
                ('CylinderLength',np.float32),
                ('CylinderRadius',np.float32),
                ('DiplopiaWeight',np.float32),
                ('EnergyPrimaryMax',np.float32),
                ('EnergyPrimaryMin',np.float32),
                ('FluxSum',np.float32),
                ('Multiplicity',np.float32),
                ('NEvents',np.float32),
                ('ParticleType',np.int64),
                ('Polygonato',np.float32),
                ('PrimarySpectralIndex',np.float32),
                ('TimeScale',np.float32),
                ('Weight',np.float32)
            ]
            )

    elif year == 2016:
        PULSES_KEY = 'SplitInIcePulses'
        MCTREE_KEY = 'I3MCTree_preMuonProp'
        weight_dtype = np.dtype(
            [
                ('AreaSum',np.float32),
                ('Atmosphere',np.float32),
                ('CylinderLength',np.float32),
                ('CylinderRadius',np.float32),
                ('EnergyPrimaryMax',np.float32),
                ('EnergyPrimaryMin',np.float32),
                ('FluxSum',np.float32),
                ('Multiplicity',np.float32),
                ('NEvents',np.float32),
                ('OverSampling',np.float32),
                ('ParticleType',np.int64),
                ('Polygonato',np.float32),
                ('PrimaryEnergy',np.float32),
                ('PrimarySpectralIndex',np.float32),
                ('PrimaryType',np.float32),
                ('ThetaMax',np.float32),
                ('ThetaMin',np.float32),
                ('TimeScale',np.float32),
                ('Weight',np.float32)
            ]
        )       

        w = dict(frame[WEIGHT_KEY])
        for key, val in w.items():
            if key in weight_dtype.names:
                weight[key] = val

   



#Output data format         
if data_type == 'muongun':

     
else:
    info_dtype = np.dtype(
        [
            ("id", id_dtype),
            ("image", np.float32, (N_X_BINS, N_Y_BINS, N_CHANNELS)),
            ("qtot", np.float32),
            ("qst", st_info_dtype, N_CHANNELS),
            ("primary", particle_dtype),
            ("prim_daughter", particle_dtype),
            ("trck_reco", particle_dtype),
            ("cscd_reco", particle_dtype),
            ("logan_veto", veto_dtype),                                                  
            ("hese", hese_dtype),
            ("weight_dict", weight_dtype),        
        ]
    )











if not data_type == 'data':
    #find primary particle
        mctree = frame[MCTREE_KEY]
        daughter = None
        if data_type == 'genie':
            prim = dataclasses.get_most_energetic_neutrino(mctree)
            
            max_energy = 0
            for part in mctree.children(prim.id):
                if (part.energy > max_energy) and (abs(part.pdg_encoding) in [11,12,13,14,15,16,17,18]):
                    max_enegy = part.energy
                    daughter = part
        else:
            prim = dataclasses.get_most_energetic_primary(mctree)
            daughter = dataclasses.get_most_energetic_muon(mctree)
           


